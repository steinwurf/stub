<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classstub_1_1function_3_01_r_07_args_8_8_8_08_4" kind="class" language="C++" prot="public">
    <compoundname>stub::function&lt; R(Args...)&gt;</compoundname>
    <includes refid="function_8hpp" local="no">function.hpp</includes>
    <innerclass refid="structstub_1_1function_3_01_r_07_args_8_8_8_08_4_1_1expectation" prot="public">stub::function&lt; R(Args...)&gt;::expectation</innerclass>
    <templateparamlist>
      <param>
        <type>typename R</type>
      </param>
      <param>
        <type>typename...</type>
        <declname>Args</declname>
        <defname>Args</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classstub_1_1function_3_01_r_07_args_8_8_8_08_4_1a4158834de45d443ae4aff46001641be9" prot="private" static="no" mutable="no">
        <type><ref refid="classstub_1_1return__handler" kindref="compound">return_handler</ref>&lt; R &gt;</type>
        <definition>return_handler&lt;R&gt; stub::function&lt; R(Args...)&gt;::m_return_handler</definition>
        <argsstring></argsstring>
        <name>m_return_handler</name>
        <briefdescription>
<para>The <ref refid="classstub_1_1return__handler" kindref="compound">return_handler</ref> manages the return values generated. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/giit/data/clones/stub-5d6b38/src/stub/function.hpp" line="253" column="1" bodyfile="/tmp/giit/data/clones/stub-5d6b38/src/stub/function.hpp" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstub_1_1function_3_01_r_07_args_8_8_8_08_4_1a3ca1fa2052b0800f3e930066ef44be8a" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; arguments&lt; Args... &gt; &gt;</type>
        <definition>std::vector&lt;arguments&lt;Args...&gt; &gt; stub::function&lt; R(Args...)&gt;::m_calls</definition>
        <argsstring></argsstring>
        <name>m_calls</name>
        <briefdescription>
<para>Stores the arguments every time the operator() is invoked. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/giit/data/clones/stub-5d6b38/src/stub/function.hpp" line="256" column="1" bodyfile="/tmp/giit/data/clones/stub-5d6b38/src/stub/function.hpp" bodystart="256" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classstub_1_1function_3_01_r_07_args_8_8_8_08_4_1a2173cc069a1c36ae4c9dac5d4b6e1189" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>R</type>
        <definition>R stub::function&lt; R(Args...)&gt;::operator()</definition>
        <argsstring>(Args... args) const</argsstring>
        <name>operator()</name>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The call operator to &quot;simulate&quot; performing a function call.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments that should be stored</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return value generated by the <ref refid="classstub_1_1return__handler" kindref="compound">return_handler</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/giit/data/clones/stub-5d6b38/src/stub/function.hpp" line="166" column="1" bodyfile="/tmp/giit/data/clones/stub-5d6b38/src/stub/function.hpp" bodystart="166" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classstub_1_1function_3_01_r_07_args_8_8_8_08_4_1ae65bb2f21cdb74661cb417466bca5c27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Returns</declname>
            <defname>Returns</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classstub_1_1return__handler" kindref="compound">return_handler</ref>&lt; R &gt; &amp;</type>
        <definition>return_handler&lt;R&gt;&amp; stub::function&lt; R(Args...)&gt;::set_return</definition>
        <argsstring>(Returns &amp;&amp;... return_value)</argsstring>
        <name>set_return</name>
        <param>
          <type>Returns &amp;&amp;...</type>
          <declname>return_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/giit/data/clones/stub-5d6b38/src/stub/function.hpp" line="174" column="1" bodyfile="/tmp/giit/data/clones/stub-5d6b38/src/stub/function.hpp" bodystart="174" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classstub_1_1function_3_01_r_07_args_8_8_8_08_4_1ac909041a2dbcbb63c953654ff5daf5f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t stub::function&lt; R(Args...)&gt;::calls</definition>
        <argsstring>() const</argsstring>
        <name>calls</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of times the call operator has been invoked </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/giit/data/clones/stub-5d6b38/src/stub/function.hpp" line="181" column="1" bodyfile="/tmp/giit/data/clones/stub-5d6b38/src/stub/function.hpp" bodystart="181" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classstub_1_1function_3_01_r_07_args_8_8_8_08_4_1aed5058d92d0cf5e64de5fff112824009" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool stub::function&lt; R(Args...)&gt;::no_calls</definition>
        <argsstring>() const</argsstring>
        <name>no_calls</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if no calls have been made otherwise false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/giit/data/clones/stub-5d6b38/src/stub/function.hpp" line="187" column="1" bodyfile="/tmp/giit/data/clones/stub-5d6b38/src/stub/function.hpp" bodystart="187" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classstub_1_1function_3_01_r_07_args_8_8_8_08_4_1afbc90cb366e154426235417f349da6b7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const arguments&lt; Args... &gt; &amp;</type>
        <definition>const arguments&lt;Args...&gt;&amp; stub::function&lt; R(Args...)&gt;::call_arguments</definition>
        <argsstring>(uint32_t index) const</argsstring>
        <name>call_arguments</name>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The arguments passed to the n&apos;th call </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/giit/data/clones/stub-5d6b38/src/stub/function.hpp" line="193" column="1" bodyfile="/tmp/giit/data/clones/stub-5d6b38/src/stub/function.hpp" bodystart="193" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classstub_1_1function_3_01_r_07_args_8_8_8_08_4_1a8ea4458e2325cca4e0cb57336be201ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>expectation</type>
        <definition>expectation stub::function&lt; R(Args...)&gt;::expect_calls</definition>
        <argsstring>() const</argsstring>
        <name>expect_calls</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Used when we want to check whether the function object is in a certain state. See examples usage in the expectation struct member functions.</para><para><simplesect kind="return"><para>An expectation object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/giit/data/clones/stub-5d6b38/src/stub/function.hpp" line="204" column="1" bodyfile="/tmp/giit/data/clones/stub-5d6b38/src/stub/function.hpp" bodystart="204" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classstub_1_1function_3_01_r_07_args_8_8_8_08_4_1a41c18053da645ec4de7d9548166a7f6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void stub::function&lt; R(Args...)&gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes all calls from the function object and reset the return handler. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/giit/data/clones/stub-5d6b38/src/stub/function.hpp" line="211" column="1" bodyfile="/tmp/giit/data/clones/stub-5d6b38/src/stub/function.hpp" bodystart="211" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classstub_1_1function_3_01_r_07_args_8_8_8_08_4_1a785527878cd968f2b8558536eddf4a35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void stub::function&lt; R(Args...)&gt;::clear_calls</definition>
        <argsstring>()</argsstring>
        <name>clear_calls</name>
        <briefdescription>
<para>Clear the calls. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/giit/data/clones/stub-5d6b38/src/stub/function.hpp" line="218" column="1" bodyfile="/tmp/giit/data/clones/stub-5d6b38/src/stub/function.hpp" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classstub_1_1function_3_01_r_07_args_8_8_8_08_4_1a7cc199d5334f5ebb4cb788a8b4576aab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void stub::function&lt; R(Args...)&gt;::print</definition>
        <argsstring>(std::ostream &amp;out) const</argsstring>
        <name>print</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints the status of the function object to the std::ostream.</para><para>Example (using the output operator):</para><para>stub::function&lt;void(uint32_t)&gt; my_func;</para><para>my_func(4U); my_func(5U);</para><para>// Print the current status of the function object, std::cout &lt;&lt; my_func &lt;&lt; std::endl;</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>The ostream where the <ref refid="classstub_1_1function" kindref="compound">stub::function</ref> status should be </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/giit/data/clones/stub-5d6b38/src/stub/function.hpp" line="236" column="1" bodyfile="/tmp/giit/data/clones/stub-5d6b38/src/stub/function.hpp" bodystart="236" bodyend="248"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The function object act like a &quot;sink&quot; for function calls i.e. we can define a function object to accept any type of function call and it will simply store the arguments for later inspection. </para>    </briefdescription>
    <detaileddescription>
<para>The typical use-case for the function object is when testing that some code invokes a specific set of functions with a specific set of arguments.</para><para>Example:</para><para>stub::function&lt;void(uint32_t)&gt; some_function;</para><para>The above function takes an uint32_t and returns nothing, lets invoke it: <verbatim>some_function(3);
some_function(4);
</verbatim></para><para>Now we may check how the function was called: <verbatim>bool called_once = some_function.expect_calls().with(3U);
assert(called_once == false);

bool called_with = some_function.expect_calls().with(4U);
assert(called_with == true);
</verbatim></para><para>We can also define a function which returns a value: <verbatim>stub::function&lt;bool(uint32_t)&gt; another_function;
</verbatim></para><para>Here we have to specify what return value we expect: <verbatim>another_function.set_return(true);

bool a = another_function(23);
bool b = another_function(13);

assert(a == true);
assert(b == true);
</verbatim></para><para>For more information on the options for return values see the <ref refid="return__handler_8hpp_source" kindref="compound">return_handler.hpp</ref> </para>    </detaileddescription>
    <location file="/tmp/giit/data/clones/stub-5d6b38/src/stub/function.hpp" line="67" column="1" bodyfile="/tmp/giit/data/clones/stub-5d6b38/src/stub/function.hpp" bodystart="66" bodyend="257"/>
    <listofallmembers>
      <member refid="classstub_1_1function_3_01_r_07_args_8_8_8_08_4_1afbc90cb366e154426235417f349da6b7" prot="public" virt="non-virtual"><scope>stub::function&lt; R(Args...)&gt;</scope><name>call_arguments</name></member>
      <member refid="classstub_1_1function_3_01_r_07_args_8_8_8_08_4_1ac909041a2dbcbb63c953654ff5daf5f9" prot="public" virt="non-virtual"><scope>stub::function&lt; R(Args...)&gt;</scope><name>calls</name></member>
      <member refid="classstub_1_1function_3_01_r_07_args_8_8_8_08_4_1a41c18053da645ec4de7d9548166a7f6a" prot="public" virt="non-virtual"><scope>stub::function&lt; R(Args...)&gt;</scope><name>clear</name></member>
      <member refid="classstub_1_1function_3_01_r_07_args_8_8_8_08_4_1a785527878cd968f2b8558536eddf4a35" prot="public" virt="non-virtual"><scope>stub::function&lt; R(Args...)&gt;</scope><name>clear_calls</name></member>
      <member refid="classstub_1_1function_3_01_r_07_args_8_8_8_08_4_1a8ea4458e2325cca4e0cb57336be201ec" prot="public" virt="non-virtual"><scope>stub::function&lt; R(Args...)&gt;</scope><name>expect_calls</name></member>
      <member refid="classstub_1_1function_3_01_r_07_args_8_8_8_08_4_1a3ca1fa2052b0800f3e930066ef44be8a" prot="private" virt="non-virtual"><scope>stub::function&lt; R(Args...)&gt;</scope><name>m_calls</name></member>
      <member refid="classstub_1_1function_3_01_r_07_args_8_8_8_08_4_1a4158834de45d443ae4aff46001641be9" prot="private" virt="non-virtual"><scope>stub::function&lt; R(Args...)&gt;</scope><name>m_return_handler</name></member>
      <member refid="classstub_1_1function_3_01_r_07_args_8_8_8_08_4_1aed5058d92d0cf5e64de5fff112824009" prot="public" virt="non-virtual"><scope>stub::function&lt; R(Args...)&gt;</scope><name>no_calls</name></member>
      <member refid="classstub_1_1function_3_01_r_07_args_8_8_8_08_4_1a2173cc069a1c36ae4c9dac5d4b6e1189" prot="public" virt="non-virtual"><scope>stub::function&lt; R(Args...)&gt;</scope><name>operator()</name></member>
      <member refid="classstub_1_1function_3_01_r_07_args_8_8_8_08_4_1a7cc199d5334f5ebb4cb788a8b4576aab" prot="public" virt="non-virtual"><scope>stub::function&lt; R(Args...)&gt;</scope><name>print</name></member>
      <member refid="classstub_1_1function_3_01_r_07_args_8_8_8_08_4_1ae65bb2f21cdb74661cb417466bca5c27" prot="public" virt="non-virtual"><scope>stub::function&lt; R(Args...)&gt;</scope><name>set_return</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
