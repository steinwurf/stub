<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="print__arguments_8hpp" kind="file" language="C++">
    <compoundname>print_arguments.hpp</compoundname>
    <includes refid="print__argument_8hpp" local="yes">print_argument.hpp</includes>
    <includes local="no">tuple</includes>
    <includes local="no">type_traits</includes>
    <includedby refid="function_8hpp" local="yes">/tmp/giit/data/clones/stub-5d6b38/src/stub/function.hpp</includedby>
    <incdepgraph>
      <node id="101">
        <label>iomanip</label>
      </node>
      <node id="102">
        <label>cstdint</label>
      </node>
      <node id="98">
        <label>/tmp/giit/data/clones/stub-5d6b38/src/stub/print_arguments.hpp</label>
        <link refid="print__arguments_8hpp"/>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
      </node>
      <node id="100">
        <label>ostream</label>
      </node>
      <node id="103">
        <label>tuple</label>
      </node>
      <node id="99">
        <label>print_argument.hpp</label>
        <link refid="print__argument_8hpp_source"/>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
      </node>
      <node id="104">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="105">
        <label>/tmp/giit/data/clones/stub-5d6b38/src/stub/print_arguments.hpp</label>
        <link refid="print__arguments_8hpp"/>
        <childnode refid="106" relation="include">
        </childnode>
      </node>
      <node id="106">
        <label>/tmp/giit/data/clones/stub-5d6b38/src/stub/function.hpp</label>
        <link refid="function_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacestub">stub</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2015<sp/>Steinwurf<sp/>ApS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>Rights<sp/>Reserved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>&quot;BSD<sp/>License&quot;.<sp/>See<sp/>the<sp/>accompanying<sp/>LICENSE.rst<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;print_argument.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestub" kindref="compound">stub</ref></highlight></codeline>
<codeline lineno="14"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="keyword">template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal">&lt;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Index<sp/>=<sp/>std::integral_constant&lt;uint32_t,<sp/>0U&gt;,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">LastIndex<sp/>=<sp/>std::integral_constant&lt;uint32_t,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)&gt;,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;Index,LastIndex&gt;::value,<sp/>uint8_t&gt;::type<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="25"><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_arguments(std::ostream&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::tuple&lt;Args...&gt;&amp;<sp/>t)</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>out;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>t;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="keyword">template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">&lt;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Index<sp/>=<sp/>std::integral_constant&lt;uint32_t,<sp/>0U&gt;,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">LastIndex<sp/>=<sp/>std::integral_constant&lt;uint32_t,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)&gt;,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_same&lt;Index,LastIndex&gt;::value,<sp/>uint8_t&gt;::type<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="60"><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_arguments(std::ostream&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::tuple&lt;Args...&gt;&amp;<sp/>t)</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>print_argument(out,<sp/>Index::value,<sp/>std::get&lt;Index::value&gt;(t));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>print_arguments&lt;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::integral_constant&lt;uint32_t,<sp/>Index::value<sp/>+<sp/>1&gt;&gt;(out,<sp/>t);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/tmp/giit/data/clones/stub-5d6b38/src/stub/print_arguments.hpp"/>
  </compounddef>
</doxygen>
