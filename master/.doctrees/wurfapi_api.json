{"stub::function<R(Args...)>::expectation::expectation(constfunction&)": {"type": "function", "scope": "stub::function< R(Args...)>::expectation", "name": "expectation", "return": {"type": "", "description": [], "link": null}, "signature": "expectation(const function &the_function)", "is_const": false, "is_static": false, "is_explicit": false, "is_inline": true, "is_virtual": false, "access": "public", "briefdescription": [], "detaileddescription": [], "parameters": [{"type": "const function &", "link": "stub::function", "name": "the_function", "description": [{"type": "text", "content": "The function we configuring an expectation for"}]}], "is_constructor": true, "is_destructor": false}, "stub::function<R(Args...)>::expectation::with(WithArgs&&...)": {"type": "function", "scope": "stub::function< R(Args...)>::expectation", "name": "with", "return": {"type": "expectation &", "description": [{"type": "text", "content": "The expectation itself, which allows chaining function calls"}], "link": "stub::function<R(Args...)>::expectation::expectation(constfunction&)"}, "signature": "with(WithArgs &&... args)", "is_const": false, "is_static": false, "is_explicit": false, "is_inline": true, "is_virtual": false, "access": "public", "briefdescription": [], "detaileddescription": [{"type": "text", "content": "Calling with(...) will add a set of arguments we expect to see. with(...) can be called multiple times in a row if we expect multiple function calls to the function object."}, {"type": "text", "content": "As an example:"}, {"type": "code", "content": "stub::function<void(uint32_t,uint32_t)> function;\nfunction(3,1);\nfunction(4,2);\n\nassert(function.expect_calls()\n           .with(3,1).with(4,2));\n", "is_block": true}], "parameters": [{"type": "WithArgs &&...", "link": null, "name": "args", "description": [{"type": "text", "content": "The arguments for a function call"}]}], "is_constructor": false, "is_destructor": false}, "stub::function<R(Args...)>::expectation::to_bool()const": {"type": "function", "scope": "stub::function< R(Args...)>::expectation", "name": "to_bool", "return": {"type": "bool", "description": [{"type": "text", "content": "True if the expectation matches the call, otherwise false"}], "link": null}, "signature": "to_bool() const", "is_const": true, "is_static": false, "is_explicit": false, "is_inline": true, "is_virtual": false, "access": "public", "briefdescription": [], "detaileddescription": [{"type": "text", "content": "Convert the expectation to a boolean value either true of false depending on whether the expectations match the actual call."}, {"type": "text", "content": "The first argument passed to the predicate function is the actual call arguments and the second is the expectation."}], "parameters": [], "is_constructor": false, "is_destructor": false}, "stub::function<R(Args...)>::expectation::operatorbool()const": {"type": "function", "scope": "stub::function< R(Args...)>::expectation", "name": "operator bool", "return": {"type": "", "description": [{"type": "text", "content": "True if the expectation matches the function, otherwise false"}], "link": null}, "signature": "operator bool() const", "is_const": true, "is_static": false, "is_explicit": true, "is_inline": true, "is_virtual": false, "access": "public", "briefdescription": [], "detaileddescription": [{"type": "text", "content": "Use the to_bool member function when casting this expectation to a boolean value."}], "parameters": [], "is_constructor": true, "is_destructor": false}, "stub::function< R(Args...)>::expectation": {"type": "struct", "name": "expectation", "location": {"file": "function.hpp", "line-start": 75, "line-stop": 160}, "scope": "stub::function< R(Args...)>", "briefdescription": [], "detaileddescription": [{"type": "text", "content": "Represent a expectation of how the function object has been invoked. Using the API it is possible to setup how we expect the function object looks like. The expectation converts to bool allowing the user to detect whether the expectation was correct."}], "members": ["stub::function<R(Args...)>::expectation::expectation(constfunction&)", "stub::function<R(Args...)>::expectation::operatorbool()const", "stub::function<R(Args...)>::expectation::to_bool()const", "stub::function<R(Args...)>::expectation::with(WithArgs&&...)"], "access": "public"}, "stub::function": {"type": "class", "name": "function", "location": {"file": "function.hpp", "line-start": 20, "line-stop": -1}, "scope": "stub", "briefdescription": [{"type": "text", "content": "Default function."}], "detaileddescription": [], "members": [], "access": "public"}, "stub::function<R(Args...)>::operator()(Args...)const": {"type": "function", "scope": "stub::function< R(Args...)>", "name": "operator()", "return": {"type": "R", "description": [{"type": "text", "content": "The return value generated by the"}, {"type": "text", "content": "return_handler", "link": "stub::return_handler"}], "link": null}, "signature": "operator()(Args... args) const", "is_const": true, "is_static": false, "is_explicit": false, "is_inline": true, "is_virtual": false, "access": "public", "briefdescription": [], "detaileddescription": [{"type": "text", "content": "The call operator to \"simulate\" performing a function call."}], "parameters": [{"type": "Args...", "link": null, "name": "args", "description": [{"type": "text", "content": "The arguments that should be stored"}]}], "is_constructor": false, "is_destructor": false}, "stub::function<R(Args...)>::set_return(Returns&&...)": {"type": "function", "scope": "stub::function< R(Args...)>", "name": "set_return", "return": {"type": "return_handler< R > &", "description": [], "link": "stub::return_handler"}, "signature": "set_return(Returns &&... return_value)", "is_const": false, "is_static": false, "is_explicit": false, "is_inline": true, "is_virtual": false, "access": "public", "briefdescription": [], "detaileddescription": [], "parameters": [{"type": "Returns &&...", "link": null, "name": "return_value", "description": ""}], "is_constructor": false, "is_destructor": false}, "stub::function<R(Args...)>::calls()const": {"type": "function", "scope": "stub::function< R(Args...)>", "name": "calls", "return": {"type": "uint32_t", "description": [{"type": "text", "content": "The number of times the call operator has been invoked"}], "link": null}, "signature": "calls() const", "is_const": true, "is_static": false, "is_explicit": false, "is_inline": true, "is_virtual": false, "access": "public", "briefdescription": [], "detaileddescription": [], "parameters": [], "is_constructor": false, "is_destructor": false}, "stub::function<R(Args...)>::no_calls()const": {"type": "function", "scope": "stub::function< R(Args...)>", "name": "no_calls", "return": {"type": "bool", "description": [{"type": "text", "content": "True if no calls have been made otherwise false"}], "link": null}, "signature": "no_calls() const", "is_const": true, "is_static": false, "is_explicit": false, "is_inline": true, "is_virtual": false, "access": "public", "briefdescription": [], "detaileddescription": [], "parameters": [], "is_constructor": false, "is_destructor": false}, "stub::function<R(Args...)>::call_arguments(uint32_t)const": {"type": "function", "scope": "stub::function< R(Args...)>", "name": "call_arguments", "return": {"type": "const arguments< Args... > &", "description": [{"type": "text", "content": "The arguments passed to the n'th call"}], "link": null}, "signature": "call_arguments(uint32_t index) const", "is_const": true, "is_static": false, "is_explicit": false, "is_inline": true, "is_virtual": false, "access": "public", "briefdescription": [], "detaileddescription": [], "parameters": [{"type": "uint32_t", "link": null, "name": "index", "description": ""}], "is_constructor": false, "is_destructor": false}, "stub::function<R(Args...)>::expect_calls()const": {"type": "function", "scope": "stub::function< R(Args...)>", "name": "expect_calls", "return": {"type": "expectation", "description": [{"type": "text", "content": "An expectation object"}], "link": null}, "signature": "expect_calls() const", "is_const": true, "is_static": false, "is_explicit": false, "is_inline": true, "is_virtual": false, "access": "public", "briefdescription": [], "detaileddescription": [{"type": "text", "content": "Used when we want to check whether the function object is in a certain state. See examples usage in the expectation struct member functions."}], "parameters": [], "is_constructor": false, "is_destructor": false}, "stub::function<R(Args...)>::clear()": {"type": "function", "scope": "stub::function< R(Args...)>", "name": "clear", "return": {"type": "void", "description": [], "link": null}, "signature": "clear()", "is_const": false, "is_static": false, "is_explicit": false, "is_inline": true, "is_virtual": false, "access": "public", "briefdescription": [], "detaileddescription": [{"type": "text", "content": "Removes all calls from the function object and reset the return handler."}], "parameters": [], "is_constructor": false, "is_destructor": false}, "stub::function<R(Args...)>::clear_calls()": {"type": "function", "scope": "stub::function< R(Args...)>", "name": "clear_calls", "return": {"type": "void", "description": [], "link": null}, "signature": "clear_calls()", "is_const": false, "is_static": false, "is_explicit": false, "is_inline": true, "is_virtual": false, "access": "public", "briefdescription": [{"type": "text", "content": "Clear the calls."}], "detaileddescription": [], "parameters": [], "is_constructor": false, "is_destructor": false}, "stub::function<R(Args...)>::print(std::ostream&)const": {"type": "function", "scope": "stub::function< R(Args...)>", "name": "print", "return": {"type": "void", "description": [], "link": null}, "signature": "print(std::ostream &out) const", "is_const": true, "is_static": false, "is_explicit": false, "is_inline": true, "is_virtual": false, "access": "public", "briefdescription": [], "detaileddescription": [{"type": "text", "content": "Prints the status of the function object to the std::ostream."}, {"type": "text", "content": "Example (using the output operator):"}, {"type": "text", "content": "stub::function<void(uint32_t)> my_func;"}, {"type": "text", "content": "my_func(4U); my_func(5U);"}, {"type": "text", "content": "// Print the current status of the function object, std::cout << my_func << std::endl;"}], "parameters": [{"type": "std::ostream &", "link": null, "name": "out", "description": [{"type": "text", "content": "The ostream where the"}, {"type": "text", "content": "stub::function", "link": "stub::function"}, {"type": "text", "content": "status should be"}]}], "is_constructor": false, "is_destructor": false}, "stub::function< R(Args...)>": {"type": "class", "name": "function< R(Args...)>", "location": {"file": "function.hpp", "line-start": 67, "line-stop": 258}, "scope": "stub", "briefdescription": [{"type": "text", "content": "The function object act like a \"sink\" for function calls i.e. we can define a function object to accept any type of function call and it will simply store the arguments for later inspection."}], "detaileddescription": [{"type": "text", "content": "The typical use-case for the function object is when testing that some code invokes a specific set of functions with a specific set of arguments."}, {"type": "text", "content": "Example:"}, {"type": "text", "content": "stub::function<void(uint32_t)> some_function;"}, {"type": "text", "content": "The above function takes an uint32_t and returns nothing, lets invoke it:"}, {"type": "code", "content": "some_function(3);\nsome_function(4);\n", "is_block": true}, {"type": "text", "content": "Now we may check how the function was called:"}, {"type": "code", "content": "bool called_once = some_function.expect_calls().with(3U);\nassert(called_once == false);\n\nbool called_with = some_function.expect_calls().with(4U);\nassert(called_with == true);\n", "is_block": true}, {"type": "text", "content": "We can also define a function which returns a value:"}, {"type": "code", "content": "stub::function<bool(uint32_t)> another_function;\n", "is_block": true}, {"type": "text", "content": "Here we have to specify what return value we expect:"}, {"type": "code", "content": "another_function.set_return(true);\n\nbool a = another_function(23);\nbool b = another_function(13);\n\nassert(a == true);\nassert(b == true);\n", "is_block": true}, {"type": "text", "content": "For more information on the options for return values see the"}, {"type": "text", "content": "return_handler.hpp", "link": "return__handler_8hpp_source"}], "members": ["stub::function< R(Args...)>::expectation", "stub::function<R(Args...)>::call_arguments(uint32_t)const", "stub::function<R(Args...)>::calls()const", "stub::function<R(Args...)>::clear()", "stub::function<R(Args...)>::clear_calls()", "stub::function<R(Args...)>::expect_calls()const", "stub::function<R(Args...)>::no_calls()const", "stub::function<R(Args...)>::operator()(Args...)const", "stub::function<R(Args...)>::print(std::ostream&)const", "stub::function<R(Args...)>::set_return(Returns&&...)"], "access": "public"}, "stub::return_handler::return_type": {"type": "using", "scope": "stub::return_handler", "location": {"file": "return_handler.hpp", "line-start": 92, "line-stop": -1}, "name": "return_type", "briefdescription": [{"type": "text", "content": "Get the unqualified version of return type."}], "detaileddescription": [], "access": "public", "identifier": {"type": "typename unqualified_type< R >::type", "link": null}}, "stub::return_handler::return_handler()": {"type": "function", "scope": "stub::return_handler", "name": "return_handler", "return": {"type": "", "description": [], "link": null}, "signature": "return_handler()", "is_const": false, "is_static": false, "is_explicit": false, "is_inline": true, "is_virtual": false, "access": "public", "briefdescription": [{"type": "text", "content": "Constructor."}], "detaileddescription": [], "parameters": [], "is_constructor": true, "is_destructor": false}, "stub::return_handler::set_return(Args&&...)": {"type": "function", "scope": "stub::return_handler", "name": "set_return", "return": {"type": "return_handler &", "description": [{"type": "text", "content": "Reference to the return handler, this allows the caller to perform additional customization to the return handler such as turn on or off repeat."}], "link": "stub::return_handler"}, "signature": "set_return(Args &&... values)", "is_const": false, "is_static": false, "is_explicit": false, "is_inline": true, "is_virtual": false, "access": "public", "briefdescription": [], "detaileddescription": [{"type": "text", "content": "Initializes the"}, {"type": "text", "content": "return_handler", "link": "stub::return_handler"}, {"type": "text", "content": "with the return values to use. Calling this function will also reset the"}, {"type": "text", "content": "return_handler", "link": "stub::return_handler"}, {"type": "text", "content": "state. So any previously specified returns values will be removed etc."}], "parameters": [{"type": "Args &&...", "link": null, "name": "values", "description": [{"type": "text", "content": "The list of return values to use"}]}], "is_constructor": false, "is_destructor": false}, "stub::return_handler::no_repeat()": {"type": "function", "scope": "stub::return_handler", "name": "no_repeat", "return": {"type": "void", "description": [], "link": null}, "signature": "no_repeat()", "is_const": false, "is_static": false, "is_explicit": false, "is_inline": true, "is_virtual": false, "access": "public", "briefdescription": [], "detaileddescription": [{"type": "text", "content": "Set repeat off. This means that no values will be repeated the user has to specify exactly the number of values that should be return otherwise an assert will be triggered."}], "parameters": [], "is_constructor": false, "is_destructor": false}, "stub::return_handler::operator()()const": {"type": "function", "scope": "stub::return_handler", "name": "operator()", "return": {"type": "R", "description": [{"type": "text", "content": "The generated return value"}], "link": null}, "signature": "operator()() const", "is_const": true, "is_static": false, "is_explicit": false, "is_inline": true, "is_virtual": false, "access": "public", "briefdescription": [], "detaileddescription": [{"type": "text", "content": "The call operator which will generate a return value."}], "parameters": [], "is_constructor": false, "is_destructor": false}, "stub::return_handler::add_return(constreturn_type&)": {"type": "function", "scope": "stub::return_handler", "name": "add_return", "return": {"type": "void", "description": [], "link": null}, "signature": "add_return(const return_type &value)", "is_const": false, "is_static": false, "is_explicit": false, "is_inline": true, "is_virtual": false, "access": "private", "briefdescription": [{"type": "text", "content": "Overload that adds a return value."}], "detaileddescription": [], "parameters": [{"type": "const return_type &", "link": "stub::return_handler::return_type", "name": "value", "description": ""}], "is_constructor": false, "is_destructor": false}, "stub::return_handler::add_return(constreturn_type&,Args&&...)": {"type": "function", "scope": "stub::return_handler", "name": "add_return", "return": {"type": "void", "description": [], "link": null}, "signature": "add_return(const return_type &value, Args &&... more)", "is_const": false, "is_static": false, "is_explicit": false, "is_inline": true, "is_virtual": false, "access": "private", "briefdescription": [{"type": "text", "content": "Add a number of return values."}], "detaileddescription": [], "parameters": [{"type": "const return_type &", "link": "stub::return_handler::return_type", "name": "value", "description": ""}, {"type": "Args &&...", "link": null, "name": "more", "description": ""}], "is_constructor": false, "is_destructor": false}, "stub::return_handler": {"type": "class", "name": "return_handler", "location": {"file": "return_handler.hpp", "line-start": 87, "line-stop": 188}, "scope": "stub", "briefdescription": [{"type": "text", "content": "The"}, {"type": "text", "content": "return_handler", "link": "stub::return_handler"}, {"type": "text", "content": "is a helper object that is used e.g. in the function object to control which return values should be generated when called."}], "detaileddescription": [{"type": "text", "content": "The"}, {"type": "text", "content": "return_handler", "link": "stub::return_handler"}, {"type": "text", "content": "provides the call operator() and when invoked it will return the specified return value. The type R will be the return value."}, {"type": "text", "content": "Example:"}, {"type": "text", "content": "return_handler<uint32_t> v; v.set_return(4U);"}, {"type": "text", "content": "uint32_t a = v(); assert(a == 4U);"}, {"type": "text", "content": "uint32_t b = v(); assert(b == 4U);"}, {"type": "text", "content": "uint32_t c = v(); assert(c != 3U); assert(c == 4U);"}, {"type": "text", "content": "Or alternatively set multiple return values:"}, {"type": "text", "content": "return_handler<uint32_t> v; v.set_return({4U,3U});"}, {"type": "text", "content": "uint32_t a = v(); assert(a == 4U);"}, {"type": "text", "content": "uint32_t b = v(); assert(b == 3U);"}, {"type": "text", "content": "uint32_t c = v(); assert(c == 4U);"}, {"type": "text", "content": "uint32_t d = v(); assert(d != 4U); assert(d == 3U);"}, {"type": "text", "content": "The default behavior is to repeat the specified return values i.e.:"}, {"type": "text", "content": "return_handler<uint32_t> v; v.set_return(3U);"}, {"type": "text", "content": "uint32_t a = v(); uint32_t b = v(); uint32_t c = v();"}, {"type": "text", "content": "assert(a == 3U && b == 3U && c == 3U);"}, {"type": "text", "content": "This behavior can be change by calling"}, {"type": "text", "content": "no_repeat()", "link": "stub::return_handler::no_repeat()"}, {"type": "text", "content": "in which case the"}, {"type": "text", "content": "return_handler", "link": "stub::return_handler"}, {"type": "text", "content": "can only be invoked once per return value specified:"}, {"type": "text", "content": "return_handler<uint32_t> v; v.set_return(1U)."}, {"type": "text", "content": "no_repeat()", "link": "stub::return_handler::no_repeat()"}, {"type": "text", "content": ";"}, {"type": "text", "content": "uint32_t a = v(); uint32_t b = v(); // <-"}, {"type": "text", "content": "Crash"}, {"type": "text", "content": "return_handler<uint32_t> v; v.set_return({1U,2U,3U})."}, {"type": "text", "content": "no_repeat()", "link": "stub::return_handler::no_repeat()"}, {"type": "text", "content": ";"}, {"type": "text", "content": "uint32_t a = v(); uint32_t b = v(); uint32_t c = v(); uint32_t d = v(); // <-"}, {"type": "text", "content": "Crash"}], "members": ["stub::return_handler::add_return(constreturn_type&)", "stub::return_handler::add_return(constreturn_type&,Args&&...)", "stub::return_handler::no_repeat()", "stub::return_handler::operator()()const", "stub::return_handler::return_handler()", "stub::return_handler::return_type", "stub::return_handler::set_return(Args&&...)"], "access": "public"}, "stub::return_handler<void>::operator()()const": {"type": "function", "scope": "stub::return_handler< void >", "name": "operator()", "return": {"type": "void", "description": [], "link": null}, "signature": "operator()() const", "is_const": true, "is_static": false, "is_explicit": false, "is_inline": true, "is_virtual": false, "access": "public", "briefdescription": [{"type": "text", "content": "Empty call operator."}], "detaileddescription": [], "parameters": [], "is_constructor": false, "is_destructor": false}, "stub::return_handler< void >": {"type": "class", "name": "return_handler< void >", "location": {"file": "return_handler.hpp", "line-start": 195, "line-stop": 202}, "scope": "stub", "briefdescription": [], "detaileddescription": [{"type": "text", "content": "Specialization for the case of a void function i.e. no return value. We expect no calls to this"}, {"type": "text", "content": "return_handler", "link": "stub::return_handler"}, {"type": "text", "content": "the call operator is only there to allow the code to compile when e.g. the function class instantiates a return handler."}], "members": ["stub::return_handler<void>::operator()()const"], "access": "public"}, "stub::operator<<(std::ostream&,constfunction<T>&)": {"type": "function", "scope": "stub", "name": "operator<<", "return": {"type": "std::ostream &", "description": [{"type": "text", "content": "The ostream operator."}], "link": null}, "signature": "operator<<(std::ostream &out, const function< T > &function)", "is_const": false, "is_static": false, "is_explicit": false, "is_inline": true, "is_virtual": false, "access": "public", "briefdescription": [], "detaileddescription": [{"type": "text", "content": "Output operator for printing function objects, see more info in stub::function::print(std::ostream&)."}], "parameters": [{"type": "std::ostream &", "link": null, "name": "out", "description": [{"type": "text", "content": "The output stream where the state of the function object will be printed."}]}, {"type": "const function< T > &", "link": "stub::function", "name": "function", "description": [{"type": "text", "content": "The function object we want to print"}]}], "is_constructor": false, "is_destructor": false}, "stub": {"type": "namespace", "name": "stub", "scope": "", "briefdescription": [], "detaileddescription": [], "members": ["stub::function", "stub::function< R(Args...)>", "stub::return_handler", "stub::return_handler< void >", "stub::operator<<(std::ostream&,constfunction<T>&)"]}}