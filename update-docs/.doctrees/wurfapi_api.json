{"stub::compare_call::implementation::implementation(WithArgs&&...)": {"is_static": false, "return": {"type": "", "link": null, "description": []}, "name": "implementation", "parameters": [{"type": "WithArgs &&...", "link": null, "name": "expected", "description": ""}], "is_explicit": false, "is_constructor": true, "is_virtual": false, "access": "public", "detaileddescription": [], "briefdescription": [], "signature": "implementation(WithArgs &&... expected)", "is_const": false, "type": "function", "scope": "stub::compare_call::implementation", "is_destructor": false, "is_inline": true}, "stub::function<R(Args...)>::print(std::ostream&)const": {"is_static": false, "return": {"type": "void", "link": null, "description": []}, "name": "print", "parameters": [{"type": "std::ostream &", "link": null, "name": "out", "description": [{"content": "The ostream where the", "type": "text"}, {"content": "stub::function", "type": "text", "link": "stub::function"}, {"content": "status should be", "type": "text"}]}], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [{"content": "Prints the status of the function object to the std::ostream.", "type": "text"}, {"content": "Example (using the output operator):", "type": "text"}, {"content": "stub::function<void(uint32_t)> my_func;", "type": "text"}, {"content": "my_func(4U); my_func(5U);", "type": "text"}, {"content": "// Print the current status of the function object, std::cout << my_func << std::endl;", "type": "text"}], "briefdescription": [], "signature": "print(std::ostream &out) const", "is_const": true, "type": "function", "scope": "stub::function< R(Args...)>", "is_destructor": false, "is_inline": true}, "stub::compare_call::interface::compare(constarguments<Args...>&)const": {"is_static": false, "return": {"type": "bool", "link": null, "description": []}, "name": "compare", "parameters": [{"type": "const arguments< Args... > &", "link": null, "name": "value", "description": ""}], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [], "briefdescription": [], "signature": "compare(const arguments< Args... > &value) const =0", "is_const": true, "type": "function", "scope": "stub::compare_call::interface", "is_destructor": false, "is_inline": false}, "stub::function<R(Args...)>::calls()const": {"is_static": false, "return": {"type": "uint32_t", "link": null, "description": [{"content": "The number of times the call operator has been invoked", "type": "text"}]}, "name": "calls", "parameters": [], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [], "briefdescription": [], "signature": "calls() const", "is_const": true, "type": "function", "scope": "stub::function< R(Args...)>", "is_destructor": false, "is_inline": true}, "stub::print_arguments(std::ostream&,conststd::tuple<Args...>&)": {"is_static": false, "return": {"type": "void", "link": null, "description": []}, "name": "print_arguments", "parameters": [{"type": "std::ostream &", "link": null, "name": "out", "description": ""}, {"type": "const std::tuple< Args... > &", "link": null, "name": "t", "description": ""}], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [{"content": "Specialization chosen for empty tuples or when Index reaches the sizeof the tuple (i.e. the number of values in the tuple), see description below.", "type": "text"}, {"content": "Prints the content of a tuple to the specified std::ostream.", "type": "text"}, {"content": "The two functions print_arguments use SFINAE (Substitution Failure Is Not An Error) to select which overload to call.", "type": "text"}, {"content": "The overloading works like this:", "type": "text"}, {"type": "list", "ordered": true, "items": [[{"content": "If print_arguments is called with an empty tuple then the empty overload will be chosen.", "type": "text"}], [{"content": "If print_argument is called with a non-empty tuple the Index!=LastIndex is true and the overload writing to the std::ostream will be called. This will then recursively call print_arguments incrementing the Index. A some point Index==LastIndex and the empty overload gets chosen and we are done.", "type": "text"}]]}, {"content": "Note that initially this was implemented using a simpler technique similar to here:", "type": "text"}, {"content": "but this did not work on with Microsoft Visual Studio 2013 so it was implemented using the std::integral_constant technique instead.", "type": "text"}], "briefdescription": [], "signature": "print_arguments(std::ostream &out, const std::tuple< Args... > &t)", "is_const": false, "type": "function", "scope": "stub", "is_destructor": false, "is_inline": true}, "stub::function<R(Args...)>::expectation::to_bool()const": {"is_static": false, "return": {"type": "bool", "link": null, "description": [{"content": "True if the expectation matches the call, otherwise false", "type": "text"}]}, "name": "to_bool", "parameters": [], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [{"content": "Convert the expectation to a boolean value either true of false depending on whether the expectations match the actual call.", "type": "text"}, {"content": "The first argument passed to the predicate function is the actual call arguments and the second is the expectation.", "type": "text"}], "briefdescription": [], "signature": "to_bool() const", "is_const": true, "type": "function", "scope": "stub::function< R(Args...)>::expectation", "is_destructor": false, "is_inline": true}, "stub::function<R(Args...)>::call_arguments(uint32_t)const": {"is_static": false, "return": {"type": "const arguments< Args... > &", "link": null, "description": [{"content": "The arguments passed to the n'th call", "type": "text"}]}, "name": "call_arguments", "parameters": [{"type": "uint32_t", "link": null, "name": "index", "description": ""}], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [], "briefdescription": [], "signature": "call_arguments(uint32_t index) const", "is_const": true, "type": "function", "scope": "stub::function< R(Args...)>", "is_destructor": false, "is_inline": true}, "stub::compare": {"name": "compare", "type": "struct", "access": "public", "detaileddescription": [{"content": "An object used to customize comparison of specific arguments when comparing two function calls.", "type": "text"}, {"content": "Example:", "type": "text"}, {"content": "bool test(uint32_t v) { return v == 1U; }", "type": "text"}, {"content": "stub::compare<bool(*)(uint32_t)> compare = { test };", "type": "text"}, {"content": "assert(compare(1U) == true); assert(compare(2U) == false);", "type": "text"}], "briefdescription": [], "scope": "stub", "members": ["stub::compare::operator()(Value)"], "location": {"file": "stub/compare.hpp", "line-stop": 37, "line-start": 26}}, "stub::function< R(Args...)>::expectation": {"name": "expectation", "type": "struct", "access": "public", "detaileddescription": [{"content": "Represent a expectation of how the function object has been invoked. Using the API it is possible to setup how we expect the function object looks like. The expectation converts to bool allowing the user to detect whether the expectation was correct.", "type": "text"}], "briefdescription": [], "scope": "stub::function< R(Args...)>", "members": ["stub::function<R(Args...)>::expectation::expectation(constfunction&)", "stub::function<R(Args...)>::expectation::operatorbool()const", "stub::function<R(Args...)>::expectation::to_bool()const", "stub::function<R(Args...)>::expectation::with(WithArgs&&...)"], "location": {"file": "stub/function.hpp", "line-stop": 157, "line-start": 75}}, "stub::return_handler::return_handler()": {"is_static": false, "return": {"type": "", "link": null, "description": []}, "name": "return_handler", "parameters": [], "is_explicit": false, "is_constructor": true, "is_virtual": false, "access": "public", "detaileddescription": [], "briefdescription": [{"content": "Constructor.", "type": "text"}], "signature": "return_handler()", "is_const": false, "type": "function", "scope": "stub::return_handler", "is_destructor": false, "is_inline": true}, "stub::compare_arguments(conststd::tuple<Args...>&,conststd::tuple<WithArgs...>&)": {"is_static": false, "return": {"type": "bool", "link": null, "description": [{"content": "When the two tuples are empty they compare equal so we return true", "type": "text"}]}, "name": "compare_arguments", "parameters": [{"type": "const std::tuple< Args... > &", "link": null, "name": "actual", "description": ""}, {"type": "const std::tuple< WithArgs... > &", "link": null, "name": "with", "description": ""}], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [{"content": "Specialization chosen for empty tuples or when Index reaches the sizeof the tuple (i.e. the number of values in the tuple), see description below.", "type": "text"}, {"content": "Compare the content of two tuples.", "type": "text"}, {"content": "The two functions compare_arguments use SFINAE (Substitution Failure Is Not An Error) to select which overload to call.", "type": "text"}, {"content": "The overloading works like this:", "type": "text"}, {"type": "list", "ordered": true, "items": [[{"content": "If compare_arguments is called with an empty tuple then the empty overload will be chosen.", "type": "text"}], [{"content": "If compare_arguments is called with a non-empty tuple the Index!=LastIndex is true and the overload calling compare_arugment(...) will be called. This will then recursively call compare_arguments incrementing the Index. A some point Index==LastIndex and the empty overload gets chosen and we are done.", "type": "text"}]]}, {"content": "Note that initially this was implemented using a simpler technique similar to here:", "type": "text"}, {"content": "but this did not work on with Microsoft Visual Studio 2013 so it was implemented using the std::integral_constant technique instead.", "type": "text"}], "briefdescription": [], "signature": "compare_arguments(const std::tuple< Args... > &actual, const std::tuple< WithArgs... > &with)", "is_const": false, "type": "function", "scope": "stub", "is_destructor": false, "is_inline": true}, "stub::return_handler::return_type": {"name": "return_type", "access": "public", "detaileddescription": [], "briefdescription": [{"content": "Get the unqualified version of return type.", "type": "text"}], "scope": "stub::return_handler", "identifier": {"type": "typename unqualified_type< R >::type", "link": null}, "type": "using", "location": {"file": "stub/return_handler.hpp", "line-stop": -1, "line-start": 92}}, "stub::function<R(Args...)>::set_return(Returns&&...)": {"is_static": false, "return": {"type": "return_handler< R > &", "link": "stub::return_handler", "description": []}, "name": "set_return", "parameters": [{"type": "Returns &&...", "link": null, "name": "return_value", "description": ""}], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [], "briefdescription": [], "signature": "set_return(Returns &&... return_value)", "is_const": false, "type": "function", "scope": "stub::function< R(Args...)>", "is_destructor": false, "is_inline": true}, "stub::return_handler::set_return(Args&&...)": {"is_static": false, "return": {"type": "return_handler &", "link": "stub::return_handler", "description": [{"content": "Reference to the return handler, this allows the caller to perform additional customization to the return handler such as turn on or off repeat.", "type": "text"}]}, "name": "set_return", "parameters": [{"type": "Args &&...", "link": null, "name": "values", "description": [{"content": "The list of return values to use", "type": "text"}]}], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [{"content": "Initializes the", "type": "text"}, {"content": "return_handler", "type": "text", "link": "stub::return_handler"}, {"content": "with the return values to use. Calling this function will also reset the", "type": "text"}, {"content": "return_handler", "type": "text", "link": "stub::return_handler"}, {"content": "state. So any previously specified returns values will be removed etc.", "type": "text"}], "briefdescription": [], "signature": "set_return(Args &&... values)", "is_const": false, "type": "function", "scope": "stub::return_handler", "is_destructor": false, "is_inline": true}, "stub::function< R(Args...)>": {"name": "function< R(Args...)>", "type": "class", "access": "public", "detaileddescription": [{"content": "The typical use-case for the function object is when testing that some code invokes a specific set of functions with a specific set of arguments.", "type": "text"}, {"content": "Example:", "type": "text"}, {"content": "stub::function<void(uint32_t)> some_function;", "type": "text"}, {"content": "The above function takes an uint32_t and returns nothing, lets invoke it:", "type": "text"}, {"content": "some_function(3);\nsome_function(4);\n", "type": "code", "is_block": true}, {"content": "Now we may check how the function was called:", "type": "text"}, {"content": "bool called_once = some_function.expect_calls().with(3U);\nassert(called_once == false);\n\nbool called_with = some_function.expect_calls().with(4U);\nassert(called_with == true);\n", "type": "code", "is_block": true}, {"content": "We can also define a function which returns a value:", "type": "text"}, {"content": "stub::function<bool(uint32_t)> another_function;\n", "type": "code", "is_block": true}, {"content": "Here we have to specify what return value we expect:", "type": "text"}, {"content": "another_function.set_return(true);\n\nbool a = another_function(23);\nbool b = another_function(13);\n\nassert(a == true);\nassert(b == true);\n", "type": "code", "is_block": true}, {"content": "For more information on the options for return values see the", "type": "text"}, {"content": "return_handler.hpp", "type": "text", "link": "return__handler_8hpp_source"}], "briefdescription": [{"content": "The function object act like a \"sink\" for function calls i.e. we can define a function object to accept any type of function call and it will simply store the arguments for later inspection.", "type": "text"}], "scope": "stub", "members": ["stub::function< R(Args...)>::expectation", "stub::function<R(Args...)>::call_arguments(uint32_t)const", "stub::function<R(Args...)>::calls()const", "stub::function<R(Args...)>::clear()", "stub::function<R(Args...)>::clear_calls()", "stub::function<R(Args...)>::expect_calls()const", "stub::function<R(Args...)>::no_calls()const", "stub::function<R(Args...)>::operator()(Args...)const", "stub::function<R(Args...)>::print(std::ostream&)const", "stub::function<R(Args...)>::set_return(Returns&&...)"], "location": {"file": "stub/function.hpp", "line-stop": 255, "line-start": 67}}, "stub::not_nullptr": {"name": "not_nullptr", "type": "struct", "access": "public", "detaileddescription": [{"content": "An object used to check if a value is not a null pointer, when comparing two function calls.", "type": "text"}, {"content": "Example:", "type": "text"}, {"content": "stub::function<void(uint32_t, uint8_t*)> foo;", "type": "text"}, {"content": "std::vector<uint8_t> buffer(10); foo(3U, buffer.data());", "type": "text"}, {"content": "assert(fool.expect_calls() .with(3U, stub::not_nullptr()));", "type": "text"}], "briefdescription": [], "scope": "stub", "members": [], "location": {"file": "stub/not_nullptr.hpp", "line-stop": 23, "line-start": 23}}, "stub::compare_argument(T,ignore)": {"is_static": false, "return": {"type": "bool", "link": null, "description": []}, "name": "compare_argument", "parameters": [{"type": "T", "link": null, "name": "a", "description": ""}, {"type": "ignore", "link": "stub::ignore", "name": null, "description": ""}], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [{"content": "Compare function where the second argument is ignore - this always compares true", "type": "text"}], "briefdescription": [], "signature": "compare_argument(T a, ignore)", "is_const": false, "type": "function", "scope": "stub", "is_destructor": false, "is_inline": true}, "stub::compare_call::compare(constarguments<Args...>&)const": {"is_static": false, "return": {"type": "bool", "link": null, "description": [{"content": "Compare the values of the passed tuple with those of the expectation.", "type": "text"}]}, "name": "compare", "parameters": [{"type": "const arguments< Args... > &", "link": null, "name": "actual", "description": ""}], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [], "briefdescription": [], "signature": "compare(const arguments< Args... > &actual) const", "is_const": true, "type": "function", "scope": "stub::compare_call", "is_destructor": false, "is_inline": true}, "stub::return_handler<void>::operator()()const": {"is_static": false, "return": {"type": "void", "link": null, "description": []}, "name": "operator()", "parameters": [], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [], "briefdescription": [{"content": "Empty call operator.", "type": "text"}], "signature": "operator()() const", "is_const": true, "type": "function", "scope": "stub::return_handler< void >", "is_destructor": false, "is_inline": true}, "stub": {"briefdescription": [], "name": "stub", "detaileddescription": [], "members": ["stub::function", "stub::function< R(Args...)>", "stub::return_handler", "stub::return_handler< void >", "stub::compare", "stub::compare_call", "stub::ignore", "stub::not_nullptr", "stub::compare_argument(T,U)", "stub::compare_argument(T,compare<Compare>)", "stub::compare_argument(T,ignore)", "stub::compare_argument(T,not_nullptr)", "stub::compare_arguments(conststd::tuple<Args...>&,conststd::tuple<WithArgs...>&)", "stub::make_compare(C)", "stub::operator<<(std::ostream&,constfunction<T>&)", "stub::print_argument(std::ostream&,uint32_t,T)", "stub::print_argument(std::ostream&,uint32_t,T*)", "stub::print_arguments(std::ostream&,conststd::tuple<Args...>&)"], "scope": "", "type": "namespace"}, "stub::print_argument(std::ostream&,uint32_t,T*)": {"is_static": false, "return": {"type": "void", "link": null, "description": []}, "name": "print_argument", "parameters": [{"type": "std::ostream &", "link": null, "name": "out", "description": ""}, {"type": "uint32_t", "link": null, "name": "index", "description": ""}, {"type": "T *", "link": null, "name": "value", "description": ""}], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [{"content": "Overload of the default printer function for pointer types.", "type": "text"}, {"content": "The reason we overload for pointers is that we cannot rely on the default std::ostream operator<< for printing pointers. std::ostream operator<< is overloaded for e.g. char* (and on most platforms also uint8_t*) to try to print it as a zero-terminated string.", "type": "text"}, {"content": "However, in many applications dealing with binary data i.e. uint8_t pointers are not to strings but to actual binary data. In these cases trying to print the data as a zero-terminated string leads to all sorts of out-of-bounds memory access.", "type": "text"}], "briefdescription": [], "signature": "print_argument(std::ostream &out, uint32_t index, T *value)", "is_const": false, "type": "function", "scope": "stub", "is_destructor": false, "is_inline": true}, "stub::return_handler::no_repeat()": {"is_static": false, "return": {"type": "void", "link": null, "description": []}, "name": "no_repeat", "parameters": [], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [{"content": "Set repeat off. This means that no values will be repeated the user has to specify exactly the number of values that should be return otherwise an assert will be triggered.", "type": "text"}], "briefdescription": [], "signature": "no_repeat()", "is_const": false, "type": "function", "scope": "stub::return_handler", "is_destructor": false, "is_inline": true}, "stub::compare_call::compare_call(WithArgs&&...)": {"is_static": false, "return": {"type": "", "link": null, "description": []}, "name": "compare_call", "parameters": [{"type": "WithArgs &&...", "link": null, "name": "expected", "description": ""}], "is_explicit": false, "is_constructor": true, "is_virtual": false, "access": "public", "detaileddescription": [], "briefdescription": [{"content": "Construct a new call comparison.", "type": "text"}], "signature": "compare_call(WithArgs &&... expected)", "is_const": false, "type": "function", "scope": "stub::compare_call", "is_destructor": false, "is_inline": true}, "stub::function<R(Args...)>::clear_calls()": {"is_static": false, "return": {"type": "void", "link": null, "description": []}, "name": "clear_calls", "parameters": [], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [], "briefdescription": [{"content": "Clear the calls.", "type": "text"}], "signature": "clear_calls()", "is_const": false, "type": "function", "scope": "stub::function< R(Args...)>", "is_destructor": false, "is_inline": true}, "stub::function<R(Args...)>::expectation::expectation(constfunction&)": {"is_static": false, "return": {"type": "", "link": null, "description": []}, "name": "expectation", "parameters": [{"type": "const function &", "link": "stub::function", "name": "the_function", "description": [{"content": "The function we configuring an expectation for", "type": "text"}]}], "is_explicit": false, "is_constructor": true, "is_virtual": false, "access": "public", "detaileddescription": [], "briefdescription": [], "signature": "expectation(const function &the_function)", "is_const": false, "type": "function", "scope": "stub::function< R(Args...)>::expectation", "is_destructor": false, "is_inline": true}, "stub::function<R(Args...)>::operator()(Args...)const": {"is_static": false, "return": {"type": "R", "link": null, "description": [{"content": "The return value generated by the", "type": "text"}, {"content": "return_handler", "type": "text", "link": "stub::return_handler"}]}, "name": "operator()", "parameters": [{"type": "Args...", "link": null, "name": "args", "description": [{"content": "The arguments that should be stored", "type": "text"}]}], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [{"content": "The call operator to \"simulate\" performing a function call.", "type": "text"}], "briefdescription": [], "signature": "operator()(Args... args) const", "is_const": true, "type": "function", "scope": "stub::function< R(Args...)>", "is_destructor": false, "is_inline": true}, "stub::function<R(Args...)>::no_calls()const": {"is_static": false, "return": {"type": "bool", "link": null, "description": [{"content": "True if no calls have been made otherwise false", "type": "text"}]}, "name": "no_calls", "parameters": [], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [], "briefdescription": [], "signature": "no_calls() const", "is_const": true, "type": "function", "scope": "stub::function< R(Args...)>", "is_destructor": false, "is_inline": true}, "stub::compare::operator()(Value)": {"is_static": false, "return": {"type": "bool", "link": null, "description": []}, "name": "operator()", "parameters": [{"type": "Value", "link": null, "name": "v", "description": ""}], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [], "briefdescription": [{"content": "Call operator which calls the compare function with the passed value.", "type": "text"}], "signature": "operator()(Value v)", "is_const": false, "type": "function", "scope": "stub::compare", "is_destructor": false, "is_inline": true}, "stub::compare_call::implementation::compare(constarguments<Args...>&)const": {"is_static": false, "return": {"type": "bool", "link": null, "description": []}, "name": "compare", "parameters": [{"type": "const arguments< Args... > &", "link": null, "name": "actual", "description": ""}], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [], "briefdescription": [], "signature": "compare(const arguments< Args... > &actual) const override", "is_const": true, "type": "function", "scope": "stub::compare_call::implementation", "is_destructor": false, "is_inline": true}, "stub::function<R(Args...)>::expect_calls()const": {"is_static": false, "return": {"type": "expectation", "link": null, "description": [{"content": "An expectation object", "type": "text"}]}, "name": "expect_calls", "parameters": [], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [{"content": "Used when we want to check whether the function object is in a certain state. See examples usage in the expectation struct member functions.", "type": "text"}], "briefdescription": [], "signature": "expect_calls() const", "is_const": true, "type": "function", "scope": "stub::function< R(Args...)>", "is_destructor": false, "is_inline": true}, "stub::compare_call::interface": {"name": "interface", "type": "struct", "access": "private", "detaileddescription": [], "briefdescription": [{"content": "Interface used in the type erasure.", "type": "text"}], "scope": "stub::compare_call", "members": ["stub::compare_call::interface::compare(constarguments<Args...>&)const", "stub::compare_call::interface::~interface()"], "location": {"file": "stub/compare_call.hpp", "line-stop": 92, "line-start": 87}}, "stub::compare_argument(T,compare<Compare>)": {"is_static": false, "return": {"type": "bool", "link": null, "description": []}, "name": "compare_argument", "parameters": [{"type": "T", "link": null, "name": "a", "description": ""}, {"type": "compare< Compare >", "link": "stub::compare", "name": "t", "description": ""}], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [], "briefdescription": [{"content": "Compare argument using custom comparison functor.", "type": "text"}], "signature": "compare_argument(T a, compare< Compare > t)", "is_const": false, "type": "function", "scope": "stub", "is_destructor": false, "is_inline": true}, "stub::compare_argument(T,U)": {"is_static": false, "return": {"type": "bool", "link": null, "description": []}, "name": "compare_argument", "parameters": [{"type": "T", "link": null, "name": "a", "description": ""}, {"type": "U", "link": null, "name": "b", "description": ""}], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [], "briefdescription": [{"content": "Compares two arguments of same type.", "type": "text"}], "signature": "compare_argument(T a, U b)", "is_const": false, "type": "function", "scope": "stub", "is_destructor": false, "is_inline": true}, "stub::operator<<(std::ostream&,constfunction<T>&)": {"is_static": false, "return": {"type": "std::ostream &", "link": null, "description": [{"content": "The ostream operator.", "type": "text"}]}, "name": "operator<<", "parameters": [{"type": "std::ostream &", "link": null, "name": "out", "description": [{"content": "The output stream where the state of the function object will be printed.", "type": "text"}]}, {"type": "const function< T > &", "link": "stub::function", "name": "function", "description": [{"content": "The function object we want to print", "type": "text"}]}], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [{"content": "Output operator for printing function objects, see more info in stub::function::print(std::ostream&).", "type": "text"}], "briefdescription": [], "signature": "operator<<(std::ostream &out, const function< T > &function)", "is_const": false, "type": "function", "scope": "stub", "is_destructor": false, "is_inline": true}, "stub::function<R(Args...)>::expectation::with(WithArgs&&...)": {"is_static": false, "return": {"type": "expectation &", "link": "stub::function<R(Args...)>::expectation::expectation(constfunction&)", "description": [{"content": "The expectation itself, which allows chaining function calls", "type": "text"}]}, "name": "with", "parameters": [{"type": "WithArgs &&...", "link": null, "name": "args", "description": [{"content": "The arguments for a function call", "type": "text"}]}], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [{"content": "Calling with(...) will add a set of arguments we expect to see. with(...) can be called multiple times in a row if we expect multiple function calls to the function object.", "type": "text"}, {"content": "As an example:", "type": "text"}, {"content": "stub::function<void(uint32_t,uint32_t)> function;\nfunction(3,1);\nfunction(4,2);\n\nassert(function.expect_calls()\n           .with(3,1).with(4,2));\n", "type": "code", "is_block": true}], "briefdescription": [], "signature": "with(WithArgs &&... args)", "is_const": false, "type": "function", "scope": "stub::function< R(Args...)>::expectation", "is_destructor": false, "is_inline": true}, "stub::make_compare(C)": {"is_static": false, "return": {"type": "compare< C >", "link": "stub::compare", "description": []}, "name": "make_compare", "parameters": [{"type": "C", "link": null, "name": "c", "description": ""}], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [{"content": "Small helper function for creating compare objects.", "type": "text"}, {"content": "Example:", "type": "text"}, {"content": "// Build a comparison function from a lambda auto compare = stub::make_compare([](uint32_t v)->bool { return v == 1U}; );", "type": "text"}, {"content": "assert(compare(1U) == true); assert(compare(2U) == false);", "type": "text"}], "briefdescription": [], "signature": "make_compare(C c)", "is_const": false, "type": "function", "scope": "stub", "is_destructor": false, "is_inline": false}, "stub::function<R(Args...)>::expectation::operatorbool()const": {"is_static": false, "return": {"type": "", "link": null, "description": [{"content": "True if the expectation matches the function, otherwise false", "type": "text"}]}, "name": "operator bool", "parameters": [], "is_explicit": true, "is_constructor": true, "is_virtual": false, "access": "public", "detaileddescription": [{"content": "Use the to_bool member function when casting this expectation to a boolean value.", "type": "text"}], "briefdescription": [], "signature": "operator bool() const", "is_const": true, "type": "function", "scope": "stub::function< R(Args...)>::expectation", "is_destructor": false, "is_inline": true}, "stub::return_handler::operator()()const": {"is_static": false, "return": {"type": "R", "link": null, "description": [{"content": "The generated return value", "type": "text"}]}, "name": "operator()", "parameters": [], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [{"content": "The call operator which will generate a return value.", "type": "text"}], "briefdescription": [], "signature": "operator()() const", "is_const": true, "type": "function", "scope": "stub::return_handler", "is_destructor": false, "is_inline": true}, "stub::compare_argument(T,not_nullptr)": {"is_static": false, "return": {"type": "bool", "link": null, "description": []}, "name": "compare_argument", "parameters": [{"type": "T", "link": null, "name": "a", "description": ""}, {"type": "not_nullptr", "link": "stub::not_nullptr", "name": null, "description": ""}], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [{"content": "Compare function where the second argument is", "type": "text"}, {"content": "not_nullptr", "type": "text", "link": "stub::not_nullptr"}, {"content": "- this evaluates to true if the first argument is anything but nullptr", "type": "text"}], "briefdescription": [], "signature": "compare_argument(T a, not_nullptr)", "is_const": false, "type": "function", "scope": "stub", "is_destructor": false, "is_inline": true}, "stub::ignore": {"name": "ignore", "type": "struct", "access": "public", "detaileddescription": [{"content": "An object used to ignore values of specific arguments when comparing two function calls.", "type": "text"}, {"content": "Example:", "type": "text"}, {"content": "stub::function<void(uint32_t, bool)> foo;", "type": "text"}, {"content": "foo(3U, true);", "type": "text"}, {"content": "assert(fool.expect_calls() .with(3U, stub::ignore()));", "type": "text"}], "briefdescription": [], "scope": "stub", "members": [], "location": {"file": "stub/ignore.hpp", "line-stop": 22, "line-start": 22}}, "stub::compare_call::interface::~interface()": {"is_static": false, "return": {"type": "", "link": null, "description": []}, "name": "~interface", "parameters": [], "is_explicit": false, "is_constructor": false, "is_virtual": true, "access": "public", "detaileddescription": [], "briefdescription": [], "signature": "~interface()", "is_const": false, "type": "function", "scope": "stub::compare_call::interface", "is_destructor": true, "is_inline": true}, "stub::return_handler::add_return(constreturn_type&,Args&&...)": {"is_static": false, "return": {"type": "void", "link": null, "description": []}, "name": "add_return", "parameters": [{"type": "const return_type &", "link": "stub::return_handler::return_type", "name": "value", "description": ""}, {"type": "Args &&...", "link": null, "name": "more", "description": ""}], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "private", "detaileddescription": [], "briefdescription": [{"content": "Add a number of return values.", "type": "text"}], "signature": "add_return(const return_type &value, Args &&... more)", "is_const": false, "type": "function", "scope": "stub::return_handler", "is_destructor": false, "is_inline": true}, "stub::compare_call": {"name": "compare_call", "type": "struct", "access": "public", "detaileddescription": [{"content": "This stores a tuple of types that is to, at some point, be compared with a different tuple of arguments.", "type": "text"}, {"content": "The basic usage is as follows:", "type": "text"}, {"content": "auto expectation = std::make_tuple(5, true, 4.0); compare_call<int, bool, double> expect(expectation);", "type": "text"}, {"content": "auto actual = std::make_tuple(4, true, 4.0);", "type": "text"}, {"content": "// Now compare our expectation with the actual values bool result = expect.compare(actual); assert(result == false);", "type": "text"}, {"content": "The", "type": "text"}, {"content": "compare_call::compare", "type": "text", "link": "stub::compare_call::compare(constarguments<Args...>&)const"}, {"content": "(...) function uses compare_arguments(...) to compare the elements of the two tuples element-wise using compare_argument(...). In the case above the two tuples contain the same types. So every thing is pretty straight-forward.", "type": "text"}, {"content": "However, in some cases we want to customize the comparison of two element. This could be that we simply don't care about a specific value or we want to use a user-define comparison function.", "type": "text"}, {"content": "To support this use-case we allow special values to be used in the comparison tuple. The two tuples can therefore have different types, making the implementation a bit more involved and the reason for the type-erausre implemented in this class.", "type": "text"}, {"content": "Lets see how this would work in practice.", "type": "text"}, {"content": "// Notice how we can pass ignore() as the second argument to our // expectation tuple. auto expectation = std::make_tuple(5, ignore(), 4.0); compare_call<int, bool, double> expect(expectation);", "type": "text"}, {"content": "auto actual = std::make_tuple(5, true, 4.0);", "type": "text"}, {"content": "// Now compare our expectation with the actual values bool result = expect.compare(actual); assert(result == true);", "type": "text"}, {"content": "The reason this works when comparing the two tuples element-wise is that the compare_argument(...) function has an overload that accepts ignore as the second argument. By specializing compare_argument(...) we can extend support for more special values to support custom behaviour.", "type": "text"}], "briefdescription": [], "scope": "stub", "members": ["stub::compare_call::compare(constarguments<Args...>&)const", "stub::compare_call::compare_call(WithArgs&&...)", "stub::compare_call::implementation", "stub::compare_call::interface"], "location": {"file": "stub/compare_call.hpp", "line-stop": 115, "line-start": 63}}, "stub::compare_call::implementation": {"name": "implementation", "type": "struct", "access": "private", "detaileddescription": [], "briefdescription": [], "scope": "stub::compare_call", "members": ["stub::compare_call::implementation::compare(constarguments<Args...>&)const", "stub::compare_call::implementation::implementation(WithArgs&&...)"], "location": {"file": "stub/compare_call.hpp", "line-stop": 109, "line-start": 96}}, "stub::function<R(Args...)>::clear()": {"is_static": false, "return": {"type": "void", "link": null, "description": []}, "name": "clear", "parameters": [], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [{"content": "Removes all calls from the function object and reset the return handler.", "type": "text"}], "briefdescription": [], "signature": "clear()", "is_const": false, "type": "function", "scope": "stub::function< R(Args...)>", "is_destructor": false, "is_inline": true}, "stub::return_handler": {"name": "return_handler", "type": "class", "access": "public", "detaileddescription": [{"content": "The", "type": "text"}, {"content": "return_handler", "type": "text", "link": "stub::return_handler"}, {"content": "provides the call operator() and when invoked it will return the specified return value. The type R will be the return value.", "type": "text"}, {"content": "Example:", "type": "text"}, {"content": "return_handler<uint32_t> v; v.set_return(4U);", "type": "text"}, {"content": "uint32_t a = v(); assert(a == 4U);", "type": "text"}, {"content": "uint32_t b = v(); assert(b == 4U);", "type": "text"}, {"content": "uint32_t c = v(); assert(c != 3U); assert(c == 4U);", "type": "text"}, {"content": "Or alternatively set multiple return values:", "type": "text"}, {"content": "return_handler<uint32_t> v; v.set_return({4U,3U});", "type": "text"}, {"content": "uint32_t a = v(); assert(a == 4U);", "type": "text"}, {"content": "uint32_t b = v(); assert(b == 3U);", "type": "text"}, {"content": "uint32_t c = v(); assert(c == 4U);", "type": "text"}, {"content": "uint32_t d = v(); assert(d != 4U); assert(d == 3U);", "type": "text"}, {"content": "The default behavior is to repeat the specified return values i.e.:", "type": "text"}, {"content": "return_handler<uint32_t> v; v.set_return(3U);", "type": "text"}, {"content": "uint32_t a = v(); uint32_t b = v(); uint32_t c = v();", "type": "text"}, {"content": "assert(a == 3U && b == 3U && c == 3U);", "type": "text"}, {"content": "This behavior can be change by calling", "type": "text"}, {"content": "no_repeat()", "type": "text", "link": "stub::return_handler::no_repeat()"}, {"content": "in which case the", "type": "text"}, {"content": "return_handler", "type": "text", "link": "stub::return_handler"}, {"content": "can only be invoked once per return value specified:", "type": "text"}, {"content": "return_handler<uint32_t> v; v.set_return(1U).", "type": "text"}, {"content": "no_repeat()", "type": "text", "link": "stub::return_handler::no_repeat()"}, {"content": ";", "type": "text"}, {"content": "uint32_t a = v(); uint32_t b = v(); // <-", "type": "text"}, {"content": "Crash", "type": "text"}, {"content": "return_handler<uint32_t> v; v.set_return({1U,2U,3U}).", "type": "text"}, {"content": "no_repeat()", "type": "text", "link": "stub::return_handler::no_repeat()"}, {"content": ";", "type": "text"}, {"content": "uint32_t a = v(); uint32_t b = v(); uint32_t c = v(); uint32_t d = v(); // <-", "type": "text"}, {"content": "Crash", "type": "text"}], "briefdescription": [{"content": "The", "type": "text"}, {"content": "return_handler", "type": "text", "link": "stub::return_handler"}, {"content": "is a helper object that is used e.g. in the function object to control which return values should be generated when called.", "type": "text"}], "scope": "stub", "members": ["stub::return_handler::add_return(constreturn_type&)", "stub::return_handler::add_return(constreturn_type&,Args&&...)", "stub::return_handler::no_repeat()", "stub::return_handler::operator()()const", "stub::return_handler::return_handler()", "stub::return_handler::return_type", "stub::return_handler::set_return(Args&&...)"], "location": {"file": "stub/return_handler.hpp", "line-stop": 188, "line-start": 87}}, "stub::return_handler< void >": {"name": "return_handler< void >", "type": "class", "access": "public", "detaileddescription": [{"content": "Specialization for the case of a void function i.e. no return value. We expect no calls to this", "type": "text"}, {"content": "return_handler", "type": "text", "link": "stub::return_handler"}, {"content": "the call operator is only there to allow the code to compile when e.g. the function class instantiates a return handler.", "type": "text"}], "briefdescription": [], "scope": "stub", "members": ["stub::return_handler<void>::operator()()const"], "location": {"file": "stub/return_handler.hpp", "line-stop": 202, "line-start": 195}}, "stub::print_argument(std::ostream&,uint32_t,T)": {"is_static": false, "return": {"type": "void", "link": null, "description": []}, "name": "print_argument", "parameters": [{"type": "std::ostream &", "link": null, "name": "out", "description": ""}, {"type": "uint32_t", "link": null, "name": "index", "description": ""}, {"type": "T", "link": null, "name": "value", "description": ""}], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "public", "detaileddescription": [{"content": "Default printer - just use the std::ostream operator<< to output the values to the stream.", "type": "text"}], "briefdescription": [], "signature": "print_argument(std::ostream &out, uint32_t index, T value)", "is_const": false, "type": "function", "scope": "stub", "is_destructor": false, "is_inline": true}, "stub::return_handler::add_return(constreturn_type&)": {"is_static": false, "return": {"type": "void", "link": null, "description": []}, "name": "add_return", "parameters": [{"type": "const return_type &", "link": "stub::return_handler::return_type", "name": "value", "description": ""}], "is_explicit": false, "is_constructor": false, "is_virtual": false, "access": "private", "detaileddescription": [], "briefdescription": [{"content": "Overload that adds a return value.", "type": "text"}], "signature": "add_return(const return_type &value)", "is_const": false, "type": "function", "scope": "stub::return_handler", "is_destructor": false, "is_inline": true}, "stub::function": {"name": "function", "type": "class", "access": "public", "detaileddescription": [], "briefdescription": [{"content": "Default function.", "type": "text"}], "scope": "stub", "members": [], "location": {"file": "stub/function.hpp", "line-stop": -1, "line-start": 20}}}