<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classstub_1_1return__handler" kind="class" language="C++" prot="public">
    <compoundname>stub::return_handler</compoundname>
    <includes refid="return__handler_8hpp" local="no">return_handler.hpp</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>R</declname>
        <defname>R</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classstub_1_1return__handler_1af067afe840ad108201de607c44bdf754" prot="public" static="no">
        <type>typename unqualified_type&lt; R &gt;::type</type>
        <definition>using stub::return_handler&lt; R &gt;::return_type =  typename unqualified_type&lt;R&gt;::type</definition>
        <argsstring></argsstring>
        <name>return_type</name>
        <briefdescription>
<para>Get the unqualified version of return type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/giit/data/clones/stub-5d6b38/src/stub/return_handler.hpp" line="92" column="1" bodyfile="/tmp/giit/data/clones/stub-5d6b38/src/stub/return_handler.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classstub_1_1return__handler_1a66ce173136be0bdb42dd9de09c42bf70" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool stub::return_handler&lt; R &gt;::m_repeat</definition>
        <argsstring></argsstring>
        <name>m_repeat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Boolean value controlling whether we should repeat return values when reaching the end of the return value vector or assert. True means we repeat, false means we should assert. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/giit/data/clones/stub-5d6b38/src/stub/return_handler.hpp" line="178" column="1" bodyfile="/tmp/giit/data/clones/stub-5d6b38/src/stub/return_handler.hpp" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstub_1_1return__handler_1a86cfa120dc71434cfaac59039544d7a8" prot="private" static="no" mutable="yes">
        <type>uint32_t</type>
        <definition>uint32_t stub::return_handler&lt; R &gt;::m_position</definition>
        <argsstring></argsstring>
        <name>m_position</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The position of the return values vector that we will return upon next invocation of the call operator. The m_positions is mutable since the call operator is a const function and we need to increment m_positions once called. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/giit/data/clones/stub-5d6b38/src/stub/return_handler.hpp" line="184" column="1" bodyfile="/tmp/giit/data/clones/stub-5d6b38/src/stub/return_handler.hpp" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstub_1_1return__handler_1ac3bd567a929adc4363562edc56130c55" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classstub_1_1return__handler_1af067afe840ad108201de607c44bdf754" kindref="member">return_type</ref> &gt;</type>
        <definition>std::vector&lt;return_type&gt; stub::return_handler&lt; R &gt;::m_returns</definition>
        <argsstring></argsstring>
        <name>m_returns</name>
        <briefdescription>
<para>Vector storing the return values to be used. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/giit/data/clones/stub-5d6b38/src/stub/return_handler.hpp" line="187" column="1" bodyfile="/tmp/giit/data/clones/stub-5d6b38/src/stub/return_handler.hpp" bodystart="187" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classstub_1_1return__handler_1a7312ed4931d0b2e1421606cf8d995d6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>stub::return_handler&lt; R &gt;::return_handler</definition>
        <argsstring>()</argsstring>
        <name>return_handler</name>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/giit/data/clones/stub-5d6b38/src/stub/return_handler.hpp" line="95" column="1" bodyfile="/tmp/giit/data/clones/stub-5d6b38/src/stub/return_handler.hpp" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classstub_1_1return__handler_1abde942de8b392d3e7459054b7491d2d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classstub_1_1return__handler" kindref="compound">return_handler</ref> &amp;</type>
        <definition>return_handler&amp; stub::return_handler&lt; R &gt;::set_return</definition>
        <argsstring>(Args &amp;&amp;... values)</argsstring>
        <name>set_return</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para>remove this code. or consider a different way to handle this. Make the <ref refid="classstub_1_1return__handler" kindref="compound">return_handler</ref> non-copyable </para></xrefdescription></xrefsect>Initializes the <ref refid="classstub_1_1return__handler" kindref="compound">return_handler</ref> with the return values to use. Calling this function will also reset the <ref refid="classstub_1_1return__handler" kindref="compound">return_handler</ref> state. So any previously specified returns values will be removed etc.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>The list of return values to use</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to the return handler, this allows the caller to perform additional customization to the return handler such as turn on or off repeat. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/giit/data/clones/stub-5d6b38/src/stub/return_handler.hpp" line="116" column="1" bodyfile="/tmp/giit/data/clones/stub-5d6b38/src/stub/return_handler.hpp" bodystart="116" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classstub_1_1return__handler_1abbb0f28065a2f20ff9f8185d2777a8ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void stub::return_handler&lt; R &gt;::no_repeat</definition>
        <argsstring>()</argsstring>
        <name>no_repeat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set repeat off. This means that no values will be repeated the user has to specify exactly the number of values that should be return otherwise an assert will be triggered. <xrefsect id="todo_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>consider making opposite behavior default. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/giit/data/clones/stub-5d6b38/src/stub/return_handler.hpp" line="131" column="1" bodyfile="/tmp/giit/data/clones/stub-5d6b38/src/stub/return_handler.hpp" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classstub_1_1return__handler_1a0cee41201ae478cfa8d52df7ce4f881f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>R</type>
        <definition>R stub::return_handler&lt; R &gt;::operator()</definition>
        <argsstring>() const</argsstring>
        <name>operator()</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The call operator which will generate a return value. <simplesect kind="return"><para>The generated return value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/giit/data/clones/stub-5d6b38/src/stub/return_handler.hpp" line="138" column="1" bodyfile="/tmp/giit/data/clones/stub-5d6b38/src/stub/return_handler.hpp" bodystart="138" bodyend="154"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classstub_1_1return__handler_1ac4d322d346accf29e4b50491957d086d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void stub::return_handler&lt; R &gt;::add_return</definition>
        <argsstring>(const return_type &amp;value)</argsstring>
        <name>add_return</name>
        <param>
          <type>const <ref refid="classstub_1_1return__handler_1af067afe840ad108201de607c44bdf754" kindref="member">return_type</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Overload that adds a return value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/giit/data/clones/stub-5d6b38/src/stub/return_handler.hpp" line="159" column="1" bodyfile="/tmp/giit/data/clones/stub-5d6b38/src/stub/return_handler.hpp" bodystart="159" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classstub_1_1return__handler_1a82ee09a32a554411f81f0dad51a9c460" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void stub::return_handler&lt; R &gt;::add_return</definition>
        <argsstring>(const return_type &amp;value, Args &amp;&amp;... more)</argsstring>
        <name>add_return</name>
        <param>
          <type>const <ref refid="classstub_1_1return__handler_1af067afe840ad108201de607c44bdf754" kindref="member">return_type</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>more</declname>
        </param>
        <briefdescription>
<para>Add a number of return values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/giit/data/clones/stub-5d6b38/src/stub/return_handler.hpp" line="167" column="1" bodyfile="/tmp/giit/data/clones/stub-5d6b38/src/stub/return_handler.hpp" bodystart="167" bodyend="171"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classstub_1_1return__handler" kindref="compound">return_handler</ref> is a helper object that is used e.g. in the function object to control which return values should be generated when called. </para>    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classstub_1_1return__handler" kindref="compound">return_handler</ref> provides the call operator() and when invoked it will return the specified return value. The type R will be the return value.</para><para>Example:</para><para>return_handler&lt;uint32_t&gt; v; v.set_return(4U);</para><para>uint32_t a = v(); assert(a == 4U);</para><para>uint32_t b = v(); assert(b == 4U);</para><para>uint32_t c = v(); assert(c != 3U); assert(c == 4U);</para><para>Or alternatively set multiple return values:</para><para>return_handler&lt;uint32_t&gt; v; v.set_return({4U,3U});</para><para>uint32_t a = v(); assert(a == 4U);</para><para>uint32_t b = v(); assert(b == 3U);</para><para>uint32_t c = v(); assert(c == 4U);</para><para>uint32_t d = v(); assert(d != 4U); assert(d == 3U);</para><para>The default behavior is to repeat the specified return values i.e.:</para><para>return_handler&lt;uint32_t&gt; v; v.set_return(3U);</para><para>uint32_t a = v(); uint32_t b = v(); uint32_t c = v();</para><para>assert(a == 3U &amp;&amp; b == 3U &amp;&amp; c == 3U);</para><para>This behavior can be change by calling <ref refid="classstub_1_1return__handler_1abbb0f28065a2f20ff9f8185d2777a8ca" kindref="member">no_repeat()</ref> in which case the <ref refid="classstub_1_1return__handler" kindref="compound">return_handler</ref> can only be invoked once per return value specified:</para><para>return_handler&lt;uint32_t&gt; v; v.set_return(1U).<ref refid="classstub_1_1return__handler_1abbb0f28065a2f20ff9f8185d2777a8ca" kindref="member">no_repeat()</ref>;</para><para>uint32_t a = v(); uint32_t b = v(); // &lt;-<mdash/> Crash</para><para>return_handler&lt;uint32_t&gt; v; v.set_return({1U,2U,3U}).<ref refid="classstub_1_1return__handler_1abbb0f28065a2f20ff9f8185d2777a8ca" kindref="member">no_repeat()</ref>;</para><para>uint32_t a = v(); uint32_t b = v(); uint32_t c = v(); uint32_t d = v(); // &lt;-<mdash/> Crash </para>    </detaileddescription>
    <location file="/tmp/giit/data/clones/stub-5d6b38/src/stub/return_handler.hpp" line="88" column="1" bodyfile="/tmp/giit/data/clones/stub-5d6b38/src/stub/return_handler.hpp" bodystart="87" bodyend="188"/>
    <listofallmembers>
      <member refid="classstub_1_1return__handler_1ac4d322d346accf29e4b50491957d086d" prot="private" virt="non-virtual"><scope>stub::return_handler</scope><name>add_return</name></member>
      <member refid="classstub_1_1return__handler_1a82ee09a32a554411f81f0dad51a9c460" prot="private" virt="non-virtual"><scope>stub::return_handler</scope><name>add_return</name></member>
      <member refid="classstub_1_1return__handler_1a86cfa120dc71434cfaac59039544d7a8" prot="private" virt="non-virtual"><scope>stub::return_handler</scope><name>m_position</name></member>
      <member refid="classstub_1_1return__handler_1a66ce173136be0bdb42dd9de09c42bf70" prot="private" virt="non-virtual"><scope>stub::return_handler</scope><name>m_repeat</name></member>
      <member refid="classstub_1_1return__handler_1ac3bd567a929adc4363562edc56130c55" prot="private" virt="non-virtual"><scope>stub::return_handler</scope><name>m_returns</name></member>
      <member refid="classstub_1_1return__handler_1abbb0f28065a2f20ff9f8185d2777a8ca" prot="public" virt="non-virtual"><scope>stub::return_handler</scope><name>no_repeat</name></member>
      <member refid="classstub_1_1return__handler_1a0cee41201ae478cfa8d52df7ce4f881f" prot="public" virt="non-virtual"><scope>stub::return_handler</scope><name>operator()</name></member>
      <member refid="classstub_1_1return__handler_1a7312ed4931d0b2e1421606cf8d995d6a" prot="public" virt="non-virtual"><scope>stub::return_handler</scope><name>return_handler</name></member>
      <member refid="classstub_1_1return__handler_1af067afe840ad108201de607c44bdf754" prot="public" virt="non-virtual"><scope>stub::return_handler</scope><name>return_type</name></member>
      <member refid="classstub_1_1return__handler_1abde942de8b392d3e7459054b7491d2d2" prot="public" virt="non-virtual"><scope>stub::return_handler</scope><name>set_return</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
